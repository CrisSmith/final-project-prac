{"version":3,"sources":["components/AppNavbar.js","actions/types.js","components/ShoppingList.js","actions/index.js","components/ItemModal.js","state.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggleNavbar","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","href","Component","DELETE_ITEM","ITEMS_LOADING","FETCH_ITEMS","CREATE_ITEM","ShoppingList","onDeleteClick","id","props","deleteItem","fetchItems","items","itemList","ListGroup","map","_id","name","ListGroupItem","key","Button","size","bind","mapDispatchToProps","dispatch","fetch","then","res","json","data","type","value","connect","currentItems","ItemModal","modalOpen","handelToggle","onChange","e","target","onSubmit","preventDefault","newItem","createItem","style","marginBottom","Modal","toggle","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","marginTop","block","item","method","headers","body","JSON","stringify","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","reducers","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6be71d2d.chunk.js","sourcesContent":["//this component will have a collapsable 'hamburger' menu containing links\nimport React, {Component} from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container} from 'reactstrap';\n\nclass AppNavbar extends Component {\n    state ={\n        isOpen: false\n    }\n    toggleNavbar=()=>{\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand>Shopping List</NavbarBrand>\n                        <NavbarToggler onClick={this.toggleNavbar} />\n                        <Collapse  isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem >\n                                    <NavLink  href=\"#\">GitHub</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href=\"#\">Other</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href=\"#\">Another</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        )\n    }\n}\nexport default AppNavbar;","export const GET_ITEMS = \"GET_ITEMS\";\nexport const ADD_ITEM = \"ADD_ITEM\";\nexport const DELETE_ITEM = \"DELETE_ITEM\";\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\nexport const FETCH_ITEMS = \"FETCH_ITEMS\";\nexport const CREATE_ITEM = \"CREATE_ITEM\"","import React, { Component } from 'react';\nimport {Container, Button, ListGroup, ListGroupItem} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {fetchItems, deleteItem} from '../actions/index';\n\n\nclass ShoppingList extends Component {\n\n    componentDidMount(){\n        //dispatching this action to the reducer:\n        this.props.fetchItems();\n    }\n    onDeleteClick=(id)=>{\n        //dispatching this action w/ value to the reducer:\n        this.props.deleteItem(id)\n    }\n    render() {\n        let {items} = this.props.itemList\n\n        return (\n            \n                <Container>\n                        <ListGroup>\n                            {items.map(({_id, name})=>{\n                                return (\n                                    <ListGroupItem key={_id}><Button size=\"sm\" onClick={this.onDeleteClick.bind(this, _id)}>x</Button> {name} </ListGroupItem>\n                                )\n                            })}\n                        </ListGroup>\n                </Container>\n            \n        )\n    }\n}\n\nShoppingList.propTypes = {\n    fetchItems: PropTypes.func.isRequired,\n    deleteItem: PropTypes.func.isRequired,\n    itemList: PropTypes.object.isRequired\n}\n\n  const mapStateToProps=(state)=> {\n      return {\n          itemList: state.currentItems\n      }\n  }\n\n  const mapDispatchToProps = {\n    fetchItems: fetchItems,\n    deleteItem: deleteItem\n   }\n \n \nexport default connect(mapStateToProps,mapDispatchToProps)(ShoppingList);\n//export default connect(mapStateToProps, {fetchItems, deleteItem})(ShoppingList)\n","//ACTIONS: \"The dispatches\"/\"The letters\"; This is where we willl ultimatetley make our request to the back end\n//actions get called (\"mailed\") in the components (or containers) --> then they hit the reducers (\"The Post Office\") for sorting the state return\n\nimport {DELETE_ITEM, ITEMS_LOADING, FETCH_ITEMS, CREATE_ITEM} from './types';\n\n\nexport function setItemsLoading(){\n    return{\n        type: ITEMS_LOADING\n    }\n}\nexport function fetchItems(){\n    return function(dispatch){\n        fetch('/items')\n        .then(res=>res.json())\n        .then(data=> dispatch({\n            type: FETCH_ITEMS,\n            value: data\n        }))\n    }\n}\nexport function createItem(item){\n    return function(dispatch){\n        fetch('/items',{\n            method:'POST',\n            headers:{'content-type':'application/json'},body: JSON.stringify(item)})\n        .then(res=>res.json())\n        .then(data=> dispatch({\n            type: CREATE_ITEM,\n            value: data\n        }))\n    }\n}\nexport function deleteItem(id){\n    return function(dispatch){\n        fetch(`/items/${id}`)\n        .then(res=>res.json())\n        .then(_id=> dispatch({ \n            type: DELETE_ITEM,\n            value: id\n        }))\n    }\n}\n\n//alternate fetch syntax:\n/*export let fetchItems = () => dispatch =>{\n    fetch('http://jsonplaceholder.typicode.com/posts')\n    .then(res=>res.json())\n    .then(data=>\n    dispatch({\n        type:FETCH_ITEMS,\n        value:data\n    }))\n}*/\n//------------------------------------\n\n\n/* actions with no fetch:\n\nexport function addItem(item){\n    return{\n        type: ADD_ITEM,\n        value: item\n    };\n}\nexport function getItems(){\n    return{\n        type: GET_ITEMS\n    };\n}\nexport function deleteItem(id){\n    return{\n        type: DELETE_ITEM,\n        value: id\n    };\n}\n*/","//The \"Form\" component\nimport React, { Component } from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, Input, Label, Form, FormGroup} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {createItem} from '../actions/index'\n\n\nclass ItemModal extends Component {\n    state={\n        modalOpen: false,\n        name:''\n    }\n    handelToggle=()=>{\n        this.setState({\n            modalOpen: !this.state.modalOpen\n        })\n    }\n    onChange=(e)=>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    onSubmit=(e)=>{\n        e.preventDefault();\n\n        //create new item:\n        let newItem ={\n            name: this.state.name\n        }\n        //call action:\n        this.props.createItem(newItem);\n\n        //close modal:\n        this.handelToggle();\n    }\n    render() {\n        return (\n            <div>\n                <Button color=\"dark\" style={{marginBottom: '2rem'}} onClick={this.handelToggle}>Add Item</Button>\n                <Modal toggle={this.handelToggle} isOpen={this.state.modalOpen}>\n                    <ModalHeader toggle={this.handelToggle}>Here is a modal - Add something</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"item\">Item Name:</Label>\n                                <Input type=\"text\" name=\"name\" id=\"item\" onChange={this.onChange}></Input>\n                                <Button style={{marginTop:\"10px\"}} block>Add Item</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        item: state.currentItems\n    }\n}\nexport default connect(mapStateToProps,{createItem})(ItemModal)","const  initialState = {\n    items: [],\n    loading: false\n}\n\nexport default initialState\n\n/*{id: 1001, name:\"Coffee\"},\n{id: 2900, name:\"Milk\"},\n{id: 3700, name:\"Steak\"},\n{id: 4800, name:\"Candy\"}*/","import {combineReducers} from 'redux';\nimport {CREATE_ITEM, DELETE_ITEM, ITEMS_LOADING, FETCH_ITEMS} from '../actions/types';\nimport initialState from '../state'\n\n \nfunction currentItems(state = initialState, action){\n    switch(action.type){    \n        case ITEMS_LOADING:\n            return{\n                ...state,\n                loading: true\n            };\n        case FETCH_ITEMS:\n            return{\n                ...state,\n                items: action.value,\n                loading:false\n            };\n        case CREATE_ITEM:\n            return{\n                ...state,\n                items: [...state.items, action.value]\n            };\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item=> item._id !== action.value)\n            };\n        default:\n            return state;\n    }\n}\n\n\n\n\nexport default combineReducers({\n    currentItems\n\n})","import {createStore, applyMiddleware, compose} from 'redux';\nimport initialState from './state';\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\n\nconst middleware = [thunk]\n\nconst store = createStore(reducers, initialState, compose(applyMiddleware(...middleware)))\n\nexport default store;","import React, {Component} from 'react';\nimport {Container} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList'\nimport ItemModal from './components/ItemModal'\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport './App.css';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n        \n      </div>\n      </Provider>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}